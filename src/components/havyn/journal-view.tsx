"use client";

import { useState, useEffect } from "react";
import { format } from "date-fns";
import type { Timestamp } from "firebase/firestore";
import { Plus, Info, Sparkles } from "lucide-react";
import { DailyCheckIn } from "@/components/havyn/daily-check-in";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import type { JournalEntry } from "@/lib/types";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Skeleton } from "@/components/ui/skeleton";

function toDate(date: Date | Timestamp): Date {
    return date instanceof Date ? date : date.toDate();
}

export function JournalView({ initialPrompt, onAddJournalEntry, entries, loading }: { initialPrompt: string; onAddJournalEntry: (entry: Omit<JournalEntry, 'id' | 'date'>) => void; entries: JournalEntry[], loading: boolean }) {
  const [showForm, setShowForm] = useState(false);

  useEffect(() => {
    if (initialPrompt) {
      setShowForm(true);
    }
  }, [initialPrompt]);

  const todayEntry = entries.find(entry => {
    if (!entry.date) return false;
    const entryDate = toDate(entry.date);
    const today = new Date();
    return entryDate.getDate() === today.getDate() &&
           entryDate.getMonth() === today.getMonth() &&
           entryDate.getFullYear() === today.getFullYear();
  });

  const handleShowForm = () => {
    setShowForm(true);
  };
  
  const handleEntryAdded = () => {
    setShowForm(false);
  }

  if (showForm) {
    return <DailyCheckIn initialPrompt={initialPrompt} onAddJournalEntry={onAddJournalEntry} onEntryAdded={handleEntryAdded} />;
  }

  return (
    <div className="p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold font-headline text-primary">Your Journal</h2>
        {!todayEntry && !loading && (
          <Button onClick={handleShowForm}>
            <Plus className="mr-2 h-4 w-4"/> New Entry
          </Button>
        )}
      </div>

      {loading && (
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <Skeleton className="h-6 w-1/2" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4 mt-2" />
            </CardContent>
          </Card>
        </div>
      )}

      {!loading && entries.length === 0 && !todayEntry && (
         <Alert className="bg-secondary">
         <Info className="h-4 w-4 text-secondary-foreground" />
         <AlertTitle>No entries yet</AlertTitle>
         <AlertDescription>
           Start by creating a new journal entry. Your thoughts will appear here.
         </AlertDescription>
       </Alert>
      )}

      {!loading && entries.sort((a, b) => toDate(b.date).getTime() - toDate(a.date).getTime()).map(entry => (
        <Card key={entry.id}>
          <CardHeader>
            <CardTitle className="flex justify-between items-start">
              <span>{format(toDate(entry.date), 'MMMM d, yyyy')}</span>
              <div className="text-right text-sm font-normal">
                <Badge variant={entry.mood === 'Happy' || entry.mood === 'Calm' ? 'default' : 'secondary'} className="bg-primary/10 text-primary">{entry.mood}</Badge>
                <p className="text-muted-foreground mt-1">Pain: {entry.painLevel}/10</p>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground whitespace-pre-wrap">{entry.entryText}</p>
            {entry.analysis && (
              <div className="mt-4 p-4 bg-secondary rounded-lg">
                <h4 className="font-semibold text-sm flex items-center gap-2 text-primary">
                  <Sparkles size={16}/> AI Analysis
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger>
                        <Info size={14} className="cursor-pointer text-muted-foreground"/>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>This analysis is generated by AI and may not be perfect.</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </h4>
                <p className="text-sm mt-2 text-muted-foreground italic">"{entry.analysis.summary}"</p>
                <div className="mt-2 flex gap-2 flex-wrap">
                  {entry.analysis.themes?.map(theme => <Badge key={theme} variant="outline" className="text-tertiary border-tertiary">{theme}</Badge>)}
                  {entry.analysis.emotions?.map(emotion => <Badge key={emotion} variant="outline" className="text-accent border-accent">{emotion}</Badge>)}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  )
}
